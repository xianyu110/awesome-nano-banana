name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd gen-tool
          npm install

      - name: Generate README files
        run: |
          cd gen-tool
          npm run generate

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Create case data JSON
        run: |
          # Create a simple script to generate case data JSON
          cat > generate-cases.mjs << 'EOF'
          import fs from 'fs';
          import path from 'path';
          import yaml from 'js-yaml';

          const casesDir = path.join(process.cwd(), 'cases');
          const outputFile = path.join(process.cwd(), 'cases-data.json');

          function loadCaseData(caseId) {
            try {
              const casePath = path.join(casesDir, caseId.toString(), 'case.yml');
              if (!fs.existsSync(casePath)) return null;

              const yamlContent = fs.readFileSync(casePath, 'utf8');
              const data = yaml.load(yamlContent);

              return {
                id: parseInt(caseId),
                ...data,
                category: getCategoryFromTitle(data.title || data.title_en || ''),
                tags: generateTags(data.title || data.title_en || '')
              };
            } catch (error) {
              console.warn(`Failed to load case ${caseId}:`, error.message);
              return null;
            }
          }

          function getCategoryFromTitle(title) {
            if (!title) return 'other';
            const titleLower = title.toLowerCase();

            if (titleLower.includes('3d') || titleLower.includes('立体') || titleLower.includes('model')) {
              return '3d';
            } else if (titleLower.includes('动漫') || titleLower.includes('anime') || titleLower.includes('q版') || titleLower.includes('chibi')) {
              return 'anime';
            } else if (titleLower.includes('写实') || titleLower.includes('realistic') || titleLower.includes('photo')) {
              return 'realistic';
            } else if (titleLower.includes('创意') || titleLower.includes('合成') || titleLower.includes('creative')) {
              return 'creative';
            }
            return 'other';
          }

          function generateTags(title) {
            if (!title) return [];
            const tags = [];
            const titleLower = title.toLowerCase();

            if (titleLower.includes('3d') || titleLower.includes('立体')) tags.push('3D');
            if (titleLower.includes('动漫') || titleLower.includes('anime')) tags.push('动漫');
            if (titleLower.includes('q版') || titleLower.includes('chibi')) tags.push('Q版');
            if (titleLower.includes('写实')) tags.push('写实');
            if (titleLower.includes('创意')) tags.push('创意');
            if (titleLower.includes('风格')) tags.push('风格转换');
            if (titleLower.includes('合成')) tags.push('图像合成');

            return tags;
          }

          const cases = [];
          // Check for case directories from 1 to 200
          for (let i = 1; i <= 200; i++) {
            const caseData = loadCaseData(i);
            if (caseData) {
              cases.push(caseData);
            }
          }

          fs.writeFileSync(outputFile, JSON.stringify(cases, null, 2));
          console.log(`Generated data for ${cases.length} cases`);
          EOF

          cd gen-tool
          node ../generate-cases.mjs

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
